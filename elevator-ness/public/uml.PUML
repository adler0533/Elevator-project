@startuml

!define TS_TYPE(type) class type << (T,#FF7700) >>

TS_TYPE(Building)
TS_TYPE(Floor)
TS_TYPE(Elevator)
TS_TYPE(Settings)
TS_TYPE(BuildingFactory)

Building : - floors : Floor[]
Building : - elevators : Elevator[]
Building : - buldingDiv : HTMLDivElement
Building : - floorsDiv : HTMLDivElement
Building : - elevatorsDiv : HTMLDivElement
Building : + constructor(numberOfFloors: number, numberOfElevators: number)
Building : + chooseElevator(floorNum: number, currentTime: number) : Elevator
Building : + callElevator(floorNumber: number)
Building : + freeFloor(floorNumber: number)

Elevator : - ID : number
Elevator : - currentFloor : number
Elevator : - destination : number
Elevator : - timer : number
Elevator : - elevatorDiv : HTMLImageElement
Elevator : - audio : HTMLAudioElement
Elevator : + constructor(id: number)
Elevator : + move(floorRequest: number, freeElevator: (floorNumber: number) => void)

Floor : - floorNumber : number
Floor : - isWaiting : boolean
Floor : - floorDiv : HTMLDivElement
Floor : - lineDiv : HTMLDivElement
Floor : - button : HTMLButtonElement
Floor : - timerElement : HTMLSpanElement
Floor : - expectedTime : number | null
Floor : - timerInterval : ReturnType<typeof setInterval> | null
Floor : + constructor(floorNum: number, callElevator: (floorNumber: number) => void)
Floor : + updateTimer()
Floor : + startTimer(arrivalTime: number)

class Settings {
  + elevatorSpeed : number
  + elevatorTravelTime : number
  + doorOpenTime : number
  + elavatorMovement : number
  + maxFloors : number
  + timerInterval : number
}

BuildingFactory : + createBuilding(numberOfFloors: number, numberOfElevators: number) : Building

Building --> Floor
Building --> Elevator
Building --> Settings
Elevator --> Settings
Floor --> Settings
BuildingFactory --> Building

@enduml
